---
description: 
globs: 
alwaysApply: false
---
 # Next.js, React, and JavaScript Best Practices

This document outlines best practices and conventions to follow for all Next.js, React, and JavaScript projects.

## React Component Practices

### Component Structure

```jsx
import { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styles from './ComponentName.module.css';

/**
 * @description Brief description of the component's purpose
 * @param {object} props - Component props
 * @returns {JSX.Element} Rendered component
 */
function ComponentName({ prop1, prop2, children }) {
  // State declarations
  const [state, setState] = useState(initialState);
  
  // Side effects
  useEffect(() => {
    // Effect logic
    
    return () => {
      // Cleanup logic
    };
  }, [dependencies]);
  
  // Event handlers
  const handleEvent = () => {
    // Handler logic
  };
  
  // Helper functions
  const helperFunction = () => {
    // Helper logic
  };
  
  // Conditional rendering logic
  if (condition) {
    return <div>Alternate UI</div>;
  }
  
  // Main render
  return (
    <div className={styles.container}>
      {/* Component markup */}
    </div>
  );
}

// Prop types validation
ComponentName.propTypes = {
  prop1: PropTypes.string.isRequired,
  prop2: PropTypes.number,
  children: PropTypes.node,
};

// Default props
ComponentName.defaultProps = {
  prop2: 0,
};

export default ComponentName;
```

### Component Best Practices

1. Keep components small and focused on a single responsibility
2. Use functional components with hooks instead of class components
3. Extract complex logic into custom hooks
4. Use proper prop validation with PropTypes or TypeScript
5. Implement proper error boundaries around components
6. Use React.memo() for performance optimization when appropriate
7. Add data-testid attributes to elements for testing
8. Use semantic HTML elements whenever possible
9. For paragraph elements, follow the project-specific formatting rule (like star emoji + German text)

## Next.js Specific Rules

### Page Structure

```jsx
import Head from 'next/head';
import { useRouter } from 'next/router';

// Metadata (App Router)
export const metadata = {
  title: 'Page Title',
  description: 'Page description',
};

// For getServerSideProps/getStaticProps (Pages Router)
export async function getServerSideProps(context) {
  // Fetch data
  return {
    props: {
      data,
    },
  };
}

export default function PageName({ data }) {
  const router = useRouter();
  
  return (
    <>
      {/* Only needed with Pages Router */}
      <Head>
        <title>Page Title</title>
        <meta name="description" content="Page description" />
      </Head>
      
      <main>
        {/* Page content */}
        <p>ðŸŒŸ Willkommen auf unserer Seite</p>
      </main>
    </>
  );
}
```

### Next.js Best Practices

1. Use Image component for optimized images
2. Implement proper dynamic routes
3. Use Next.js Link component for client-side navigation
4. Implement proper error pages (404, 500)
5. Use Next.js API routes for backend functionality
6. Use incremental static regeneration when appropriate
7. Implement proper loading states
8. Use next/font for optimized font loading
9. Implement proper SEO practices (metadata, structured data, etc.)
10. Use server components for data fetching (App Router)

## JavaScript/General Code Rules

### Variable Naming

- Use camelCase for variables and functions
- Use PascalCase for component names
- Use UPPER_SNAKE_CASE for constants
- Use descriptive names that explain purpose
- Prefix boolean variables with "is", "has", "should", etc.

### Function Rules

- Functions should do one thing only
- Keep functions small (under 30 lines when possible)
- Use arrow functions for callbacks and simple functions
- Handle errors properly with try/catch
- Use async/await instead of raw promises
- Return early to avoid deep nesting
- Add JSDoc comments for complex functions

### Code Organization 

- Group related code together
- Keep files under 300 lines when possible
- Split large components into smaller ones
- Use named exports for utility functions
- Use default exports for components
- Organize imports in groups (React, third-party, internal)

### CSS/Styling

- Use CSS modules for component-specific styles
- Use consistent naming conventions for CSS classes
- Group related styles together
- Use responsive design principles
- Implement a consistent color scheme with variables
- Follow this simple hierarchy:
  ```css
  .component {
    /* Box model (from outside in) */
    margin: 0;
    border: 0;
    padding: 0;
    width: 100%;
    height: auto;
    
    /* Visual properties */
    background: white;
    color: black;
    
    /* Text properties */
    font-family: sans-serif;
    font-size: 16px;
    
    /* Miscellaneous */
    cursor: pointer;
    transition: all 0.3s;
  }
  ```

### Performance Optimization

1. Memoize expensive calculations (useMemo)
2. Avoid unnecessary re-renders (React.memo, useCallback)
3. Implement code-splitting with dynamic imports
4. Optimize images and assets
5. Use proper keys for list items
6. Implement proper loading states
7. Use efficient data structures and algorithms
8. Leverage browser caching
9. Implement proper bundling and minification

### Accessibility (a11y)

1. Use semantic HTML elements
2. Implement proper contrast ratios
3. Provide alt text for images
4. Ensure keyboard navigability
5. Implement proper ARIA attributes
6. Test with screen readers
7. Provide visible focus states
8. Support text zooming
9. Implement proper form labels
10. Add skip navigation links

### Testing

1. Write tests for critical components and functionality
2. Follow the Testing Trophy approach:
   - Static analysis (ESLint, TypeScript)
   - Unit tests for utility functions
   - Integration tests for component interactions
   - End-to-end tests for critical user flows
3. Use meaningful test names that describe behavior
4. Use proper test selectors (data-testid)
5. Mock external dependencies

### Git Practices

1. Use semantic commit messages
   - feat: new feature
   - fix: bug fix
   - docs: documentation
   - style: formatting
   - refactor: code restructuring
   - test: adding tests
   - chore: maintenance
2. Create a new branch for each feature or fix
3. Keep commits small and focused
4. Write clear PR descriptions

## Project Setup

### ESLint Configuration

```js
// .eslintrc.js
module.exports = {
  extends: [
    'next/core-web-vitals',
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsx-a11y/recommended',
  ],
  rules: {
    // Custom rules
  },
};
```

### Prettier Configuration

```js
// .prettierrc.js
module.exports = {
  semi: true,
  trailingComma: 'all',
  singleQuote: true,
  printWidth: 80,
  tabWidth: 2,
};
```

Remember to adapt these rules to your specific project requirements and team preferences.